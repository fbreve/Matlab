qtnode = size(X,1);
qtclass = max(label);

% Variáveis para saída fuzzy acumulada
cst_owndegacc = zeros(qtnode,qtclass); % Consistencia
lbp_owndegacc = zeros(qtnode,qtclass); % Label Propagation
lnp_owndegacc = zeros(qtnode,qtclass); % Linear Neighborhood Propagation
prt_owndegacc = zeros(qtnode,qtclass); % Particles

% Parâmetros dos algoritmos
cst_sigma = 1; % Consistencia
lbp_sigma = 1; % Label Propagation
lnp_k = 4;     % Linear Neighborhood Propagation
prt_k = 5;     % Particles

% Gerando grafos
cst_W = graphgensig(X,cst_sigma); % Consistencia
lbp_W = graphgensig(X,lbp_sigma); % Label Propagation
lnp_W = graphgenlnp(X,lnp_k);     % Linear Neighborhood Propagation
prt_W = graphgenknn(X,prt_k);     % Particles
  
for i=1:1000
    display(sprintf('Iteração %i',i));
    slabel = slabelgen(label,0.1);
    [~,ownfuz] = zhoug(cst_W,slabel);
    cst_owndegacc = cst_owndegacc + ownfuz;
    [~,ownfuz] = labelpropg(lbp_W,slabel);
    lbp_owndegacc = lbp_owndegacc + ownfuz;
    [~,ownfuz] = lnpg(lnp_W,slabel);
    lnp_owndegacc = lnp_owndegacc + ownfuz;
    [~,~,ownfuz] = strwalk8g(prt_W,slabel,0.5,0.1);
    prt_owndegacc = prt_owndegacc + ownfuz;
end

cst_owndegacc = cst_owndegacc ./ 1000;
lbp_owndegacc = lbp_owndegacc ./ 1000;
lnp_owndegacc = lnp_owndegacc ./ 1000;
prt_owndegacc = prt_owndegacc ./ 1000;

save owndeg cst_owndegacc lbp_owndegacc lnp_owndegacc prt_owndegacc
dotgen('walk.dot',prt_W,prt_owndegacc,1);

%owndeg = owndegacc ./ 1000;

%overlapcolor;
%dotgen;