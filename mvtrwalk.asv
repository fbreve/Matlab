% Missing Values Territory Mark Walk v.1
% Derivado de strwalk10.m
% Usage: [Y, pot, owndeg, distnode] = mvtrwalk(X, sigma, pdet, deltav, deltap, dexp, iter)
function [Y, pot, owndeg, distnode] = mvtrwalk(X, sigma, pdet, deltav, deltap, dexp, iter)
    if (nargin < 8) || isempty(iter),
        iter = 200000; % número de iterações
    end    
    if (nargin < 6) || isempty(dexp),
        dexp = 2; % exponencial de probabilidade
    end
    if (nargin < 5) || isempty(deltap),
        deltap = 1.000; % controle de velocidade de aumento/decremento do potencial da partícula
    end    
    if (nargin < 4) || isempty(deltav),
        deltav = 0.100; % controle de velocidade de aumento/decremento do potencial do vértice
    end    
    if (nargin < 3) || isempty(pdet),
        pdet = 0.500; % probabilidade de não explorar
    end    
    if (nargin < 2) || isempty(sigma),
        sigma = 0.02;
    end
    % constantes
    knn = 5;
    potmax = 1.000; % potencial máximo
    potmin = 0.000; % potencial mínimo
    qtnode = size(X,1); % quantidade de nós
    qtfeat = size(X,2); % quantidade de atributos
    qtpart = sum(~isnan(sum(X,2))); % quantidade de partículas 
    ivconv = round(min(100,qtnode/qtpart)); % qtde de iterações para verificar convergência    
    W = squareform(pdist(X ./ repmat(nanstd(X),qtnode,1),'naneucdist').^2);  % gerando matriz de afinidade
    W = W/max(max(W)); % normalizando matriz de afinidade no intervalo [0 1]
    G1 = W <= sigma;  % gerando grafo com limiar sobre matriz de afinidade
    B = sort(W,2);  % ordenando matriz de afinidade
    G2 = W <= repmat(B(:,knn+1),1,qtnode);  % conectando k-vizinhos mais próximos
    graph = G1 | G2 | G2';  % juntando grafo limiar com grafo k-vizinhos
    clear W G1 B G2;
    graph = graph - eye(qtnode);  % zerando diagonal do grafo
    %graph = X;
    % tabela de potenciais de nós
    pot = repmat(potmax/qtpart,qtnode,qtpart);  
    % definindo potencial da partícula
    potpart = repmat(potmax,qtpart,1);
    % definindo tabela de distâncias dos nós
    distnode = repmat(qtnode-1,qtnode,qtpart);
    % criando tabela de home nodes de cada partícula
    parthomenode = zeros(qtpart,1);
    % criando tabela de posição inicial das partículas
    partpos=zeros(qtpart,1);    
    %verificando nós com valores faltando
    nodemv = sum(isnan(X),2);
    %configurando nós potenciais, home nodes, distância, posição inicial 
    j=1;
    for i=1:qtnode
        % se nó tem todos os atributos conhecidos
        if nodemv(i)==0
            pot(j,:)=0;             % definindo potencial de outras partículas para zero
            pot(j,j)=1;             % definindo potencial da própria partícula para 1
            parthomenode(j)=i;      % definindo classe da partícula
            distnode(j,j)=0;        % definindo distância do home node para 0 na tabela de sua respectiva partícula
            partpos(j)=i;           % definindo posição inicial da partícula para seu respectivo nó pré-rotulado
            j = j + 1;                          
        end
    end
    % definindo grau de propriedade
    owndeg = repmat(realmin,qtnode,qtpart);  % não podemos usar 0, porque nós não visitados dariam divisão por 0
    % variável para guardar máximo potencial mais alto médio
    maxmmpot = 0;
    for i=1:iter
        % para cada partícula
        rndtb = unifrnd(0,1,qtpart,1);
        for j=1:qtpart
            % calculando probabilidade de exploração
            if rndtb(j)<pdet
                % regra de probabilidade
                %prob = graph(partpos(j),:).*(1./(alpha.^distnode(:,j)))';  
                prob = cumsum(graph(partpos(j),:).*(1./(1+distnode(:,j)).^dexp)'.* pot(:,j)');
                movtype = 0;
            else
                % regra de probabilidade
                prob = cumsum(graph(partpos(j),:));   %.*pot(:,j)';
                movtype = 1;
            end
            % girando a roleta para sortear o novo nó
            roulettepick = unifrnd(0,prob(end));
            % descobrindo quem foi o nó sorteado
            k = find(prob>=roulettepick,1,'first');           
            % contador de visita (para calcular grau de propriedade)
            if movtype==1
                owndeg(k,j) = owndeg(k,j) + potpart(j);
            end            
            % se o nó tem todos os atributos conhecidos
            if nodemv(k)==0
                % calculando novos potenciais para nó
                deltapotpart = pot(k,:) - max(potmin,pot(k,:) - potpart(j)*(deltav/(qtpart-1)));
                pot(k,:) = pot(k,:) - deltapotpart;
                pot(k,j) = pot(k,j) + sum(deltapotpart);
            end
            % atribui novo potencial para partícula
            potpart(j) = potpart(j) + (pot(k,j)-potpart(j))*deltap;
                      
            % se distância do nó alvo maior que distância do nó atual + 1
            if distnode(partpos(j),j)+1<distnode(k,j)
                % atualizar distância do nó alvo
                distnode(k,j) = distnode(partpos(j),j)+1;
            end
            
            % se não houve choque
            if pot(k,j)>=max(pot(k,:))
                % muda para nó alvo
                partpos(j) = k;
            end
        end
        % critério de parada
        if mod(i,ivconv)==0
            mmpot = mean(max(pot,[],2));
            disp(sprintf('Iter: %5.0f  Meanpot: %0.4f',i,mmpot))
            if mmpot>maxmmpot
                maxmmpot = mmpot;
                stopcnt = 0;
            else    
                stopcnt = stopcnt + 1;
                if stopcnt > 20                     
                    break;
                end
            end
        end
    end
    % normalizando potenciais acumulados
    owndeg = owndeg ./ repmat(sum(owndeg,2),1,qtpart);
    % X com valores estimados para valores faltando
    Y = X;
    for i=1:qtnode
        for j=1:qtfeat
            if isnan(X(i,j))==1
                Y(i,j) = 0;
                for k=1:qtpart
                    Y(i,j) = Y(i,j) + X(parthomenode(k),j) * owndeg(i,k);
                end
            end
        end
    end
end

